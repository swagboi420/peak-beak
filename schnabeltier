library(EBImage)
library(e1071)
library(class)
library(neuralnet)

schnabelpfad = "C:/Users/Marius/Pictures/Schnabeltiere/"
andererpfad = "C:/Users/Marius/Pictures/Nicht-Schnabeltiere/"


schnabeldateien = list.files(schnabelpfad)
anderedateien = list.files(andererpfad)
schnabelbilder = list()
anderebilder = list()

for(d in schnabeldateien){
  schnabelbilder[[length(schnabelbilder)+1]] = readImage(paste0(schnabelpfad, d))
}

for(d in anderedateien){
  anderebilder[[length(anderebilder)+1]] = readImage(paste0(andererpfad, d))
}

bilder = c(schnabelbilder, anderebilder)


# Erstellen der Merkmalsvektoren im R^303

rot = t(data.frame(rep(0, 101)))
gruen = t(data.frame(rep(0, 101)))
blau = t(data.frame(rep(0, 101)))

liste = list(rot, gruen, blau)

for(i in 1:length(bilder)){
  cat(paste0("i = ", i, ", "))
  
  for(j in 1:3){
    cat(paste0("j = ", j, "\n"))
    
    frame = t(data.frame(rep(0, 101)))
    colnames(frame) = seq(0, 1, by=0.01)
    
    temp = table(round(imageData(bilder[[i]][,,j]), digits=2))
    
    for(k in 1:101){
      if(colnames(frame)[k] %in% names(temp)) frame[1,k] = frame[1,k]+temp[colnames(frame)[k]]
    }
    
    frame = frame/rowSums(frame)
    liste[[j]] = rbind(liste[[j]], frame)
  }
}


# Alternative Merkmalsvektoren im R^11

helligkeit = data.frame(c(0), c(0))
rot2 = data.frame(c(0), c(0), c(0))
gruen2 = data.frame(c(0), c(0), c(0))
blau2 = data.frame(c(0), c(0), c(0))

for(i in 1:length(bilder)){
  tab = table(c(imageData(bilder[[i]])))
  max1 = as.numeric(names(tab[order(-tab)])[1])
  max2 = as.numeric(names(tab[order(-tab)])[2])
  helligkeit = rbind(helligkeit, c(max1, max2))

  hst = hist(bilder[[i]])

  cat("rot", sep = " ")
  rmax1 = hst$red$mids[order(-hst$red$counts)][1]
  rmax2 = hst$red$mids[order(-hst$red$counts)][2]
  rmean = sum(hst$red$mids*hst$red$counts)/sum(hst$red$counts)

  cat("grÃ¼n", sep = " ")
  gmax1 = hst$green$mids[order(-hst$green$counts)][1]
  gmax2 = hst$green$mids[order(-hst$green$counts)][2]
  gmean = sum(hst$green$mids*hst$green$counts)/sum(hst$green$counts)

  cat("blau", sep="\n")
  bmax1 = hst$blue$mids[order(-hst$blue$counts)][1]
  bmax2 = hst$blue$mids[order(-hst$blue$counts)][2]
  bmean = sum(hst$blue$mids*hst$blue$counts)/sum(hst$blue$counts)

  rot2 = rbind(rot, c(rmax1, rmax2, rmean))
  gruen2 = rbind(gruen, c(gmax1, gmax2, gmean))
  blau2 = rbind(blau, c(bmax1, bmax2, bmean))
}

helligkeit = helligkeit[-1,]
rot2 = rot2[-1,]
gruen2 = gruen2[-1,]
blau2 = blau2[-1,]

daten2 = cbind(helligkeit, rot2, gruen2, blau2)

rot = liste[[1]][-1,]
colnames(rot) = paste0("r", colnames(rot))
gruen = liste[[2]][-1,]
colnames(gruen) = paste0("g", colnames(gruen))
blau = liste[[3]][-1,]
colnames(blau) = paste0("b", colnames(blau))

daten = as.data.frame(cbind(rot, gruen, blau))
row.names(daten) = 1:nrow(daten)

lbls = factor(c(rep("Schnabeltier", length(schnabelbilder)), rep("Andere", length(anderebilder))))
daten = cbind(daten, lbls)
daten2 = cbind(daten2, lbls)



# Samplen von Trainings- und Validierungsmenge

testindizes = sample(1:nrow(daten), floor(nrow(daten)/3))
trainingset = daten[-testindizes,]
testset = daten[testindizes,]

trainingset2 = daten2[-testindizes,]
testset2 = daten2[testindizes,]


# kNN

knnpred = knn(trainingset[,-ncol(trainingset)], testset[,-ncol(testset)], k=3, cl=trainingset$lbls)
knntab = table(knnpred, true = testset$lbls)



# Neural Network

nnlblstraining = as.numeric(as.character(trainingset$lbls) == "Schnabeltier")
nnlblstest = as.numeric(as.character(testset$lbls) == "Schnabeltier")

form = as.formula(paste("nnlblstraining ~", paste(names(trainingset2)[-ncol(trainingset2)], collapse = " + ")))
nn = neuralnet(form, data=trainingset2[,-ncol(trainingset2)], hidden=c(150, 50), linear.output = FALSE)
pred = compute(nn, testset2[,-ncol(testset2)])$net.result



# SVM

tuned = tune.svm(lbls~., data=trainingset, gamma=10^(-5:-1), cost=10^(0:5))
model = tuned$best.model
prediction = predict(model, testset[,-ncol(testset)])
tab = table(pred = prediction, true = testset[,ncol(testset)])
tab
